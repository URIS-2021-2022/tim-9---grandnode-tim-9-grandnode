@model VendorModel
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsTwo";
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    var canonicalUrlsEnabled = seoSettings.CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var vendorUrl = Url.RouteUrl("Vendor", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(vendorUrl);
    }
}

<div class="page vendor-page">
       <div class="col-12"> 
    <h1 class="h2 generalTitle">
        @Model.Name
    </h1> 
           @if (Model.AllowCustomersToContactVendors)
           {
               <input type="button" value="@T("ContactVendor")" class="btn btn-sm btn-secondary contact-vendor-button float-xs-right" onclick="setLocation('@Url.RouteUrl("ContactVendor", new { vendorId = Model.Id })')" />
           }
           @await Component.InvokeAsync("Widget", new { widgetZone = "vendordetails_top", additionalData = Model.Id })
           @*description*@
           @if (!String.IsNullOrWhiteSpace(Model.Description))
           {
               <article class="text-xs-center generalMarginSupporter vendor-description">
                   @Html.Raw(Model.Description)
               </article>
           }
           @*review*@
           @if (Model.VendorReviewOverview.AllowCustomerReviews)
           {
               <div>
                   @await Html.PartialAsync("_VendorReviewOverview", Model.VendorReviewOverview)
               </div>
           }
           @*contact vendor*@
           @if (Model.Products.Count > 0)
           {
               @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
           }
       </div>
        @*product list*@
        @if (Model.Products.Count > 0)
            {
                if (Model.PagingFilteringContext.ViewMode == "grid")
                {
                <div class="col-12">
                    <div class="row flex-grid">
                        @foreach (var product in Model.Products)
                        {
                            <div class="col-lg-4 col-sm-6 col-12">
                                @await Html.PartialAsync("_ProductBox", product)
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="col-12">
                    @foreach (var product in Model.Products)
                    {
                        @await Html.PartialAsync("_ProductBoxList", product)
                    }
                </div>
            }
        }
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
            <div class="pager">
                @pager
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "vendordetails_bottom", additionalData = Model.Id })
    </div>
